(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{535:function(e,r,s){"use strict";s.r(r);var a=s(17),v=Object(a.a)({},(function(){var e=this,r=e.$createElement,s=e._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"前后端分离springboot项目-docker部署后端jar包"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前后端分离springboot项目-docker部署后端jar包"}},[e._v("#")]),e._v(" 前后端分离SpringBoot项目,Docker部署后端Jar包")]),e._v(" "),s("blockquote",[s("p",[s("strong",[e._v("Docker制作后端项目镜像")])])]),e._v(" "),s("h3",{attrs:{id:"第一步-下载docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一步-下载docker"}},[e._v("#")]),e._v(" 第一步 下载Docker")]),e._v(" "),s("p",[e._v("使用的是CentOS7,内核低于3.0好像不行,查看内核命令 uname -r")]),e._v(" "),s("p",[e._v("yum install docker")]),e._v(" "),s("p",[e._v("1")]),e._v(" "),s("p",[e._v("常用docker命令")]),e._v(" "),s("p",[e._v("启动docker：systemctl start docker")]),e._v(" "),s("p",[e._v("停止docker：systemctl stop docker")]),e._v(" "),s("p",[e._v("重启docker：systemctl restart docker")]),e._v(" "),s("p",[e._v("查看docker状态：systemctl status docker")]),e._v(" "),s("p",[e._v("开机启动：systemctl enable docker")]),e._v(" "),s("p",[e._v("查看镜像: docker images")]),e._v(" "),s("p",[e._v("搜索镜像:docker search 镜像名称")]),e._v(" "),s("p",[e._v("下载镜像:docker pull 镜像名称")]),e._v(" "),s("p",[e._v("删除镜像:docker rmi")]),e._v(" "),s("p",[e._v("删除容器:docker rm")]),e._v(" "),s("p",[e._v("查看容器:docker ps")]),e._v(" "),s("p",[e._v("查看停止的容器:docker ps -a")]),e._v(" "),s("p",[e._v("查看最后一次运行的容器:docker pa -l")]),e._v(" "),s("p",[e._v("…")]),e._v(" "),s("h3",{attrs:{id:"第二步-创建文件夹-mkdir-docker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二步-创建文件夹-mkdir-docker"}},[e._v("#")]),e._v(" 第二步 创建文件夹 mkdir docker")]),e._v(" "),s("p",[e._v("然后cd docker/")]),e._v(" "),s("p",[e._v("创建Dockerfile文件")]),e._v(" "),s("p",[e._v("# Docker image for springboot file run")]),e._v(" "),s("p",[e._v("# VERSION 0.0.1")]),e._v(" "),s("p",[e._v("# Author: pibigstar")]),e._v(" "),s("p",[e._v("# 基础镜像使用java")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("FROM java:8\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("\\# VOLUME 指定了临时文件目录为/tmp。\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("# 其效果是在主机 /var/lib/docker 目录下创建了一个临时文件，并链接到容器的/tmp")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("VOLUME /tmp \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("# 将jar包添加到容器中并更名为app.jar")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("ADD 上传jar名称.jar 更改的名称.jar \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("​")]),e._v(" "),s("p",[e._v("# 运行jar包")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('RUN bash -c \'touch /更改的名称.jar\'\n\nENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/更改的名称.jar"]\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("h3",{attrs:{id:"第三步-生成docker镜像"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三步-生成docker镜像"}},[e._v("#")]),e._v(" 第三步 生成Docker镜像")]),e._v(" "),s("p",[e._v("docker build -t 生成的镜像名称 .")]),e._v(" "),s("p",[e._v("1")]),e._v(" "),s("p",[e._v("生成的镜像名称后面两个空格一个点切记")]),e._v(" "),s("p",[e._v("第四步 查看镜像是否生成docker images,然后生成容器")]),e._v(" "),s("p",[e._v("生成守护式容器名为linsir_web端口映射9000映射到容器内端口9000")]),e._v(" "),s("p",[e._v("docker run -di --name=linsir_web -p 9000:9000 镜像名称")]),e._v(" "),s("p",[e._v("1")]),e._v(" "),s("p",[e._v("这样子镜像就制作完成了,还需要依赖数据库容器")]),e._v(" "),s("p",[e._v("docker search mysql")]),e._v(" "),s("p",[e._v("docker pull mysql")]),e._v(" "),s("p",[e._v("下载 版本根据个人决定,8.0的mysql需要设置")]),e._v(" "),s("p",[e._v("8.0版本的 root的用户的加密方式为caching_sha2_passoword, 而navicat连接所用的方式为native_password。mysql为远程连接和本地连接提供了不同的密码验证方式。")]),e._v(" "),s("p",[e._v("select host,user,plugin,authentication_string from om mysql.user;er;")]),e._v(" "),s("p",[e._v("ALTER user 'root'@'%' IDENTIFIED WITH mysql_native_password BY 'server';")]),e._v(" "),s("p",[e._v("FLUSH PRIVILEGES;   #最后刷新下权限")]),e._v(" "),s("p",[e._v("再用SQLyog或者navicat远程连接测试一下能否连接成功")]),e._v(" "),s("p",[e._v("记得项目内applilcation配置文件中mysql路径要配置容器内数据库服务器ip与端口")]),e._v(" "),s("p",[e._v("查看容器ip信息 命令")]),e._v(" "),s("p",[e._v("docker inspect 容器名称")]),e._v(" "),s("p",[e._v("容器处于运行状态才可以看到IP")]),e._v(" "),s("p",[e._v("运行容器打开浏览器测试一下就OK啦,后端包就部署成功了")]),e._v(" "),s("p",[e._v("---------------------")]),e._v(" "),s("p",[e._v("作者：LinSirC")]),e._v(" "),s("p",[e._v("来源：CSDN")]),e._v(" "),s("p",[e._v("原文："),s("a",{attrs:{href:"https://blog.csdn.net/weixin_43789418/article/details/84499123",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://blog.csdn.net/weixin_43789418/article/details/84499123 "),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("版权声明：本文为博主原创文章，转载请附上博文链接！")])])}),[],!1,null,null,null);r.default=v.exports}}]);