(window.webpackJsonp=window.webpackJsonp||[]).push([[109],{610:function(s,t,a){"use strict";a.r(t);var e=a(17),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"this使得springaop失效之谜"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this使得springaop失效之谜"}},[s._v("#")]),s._v(" this使得springAOP失效之谜")]),s._v(" "),a("h3",{attrs:{id:"_1-问题描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-问题描述"}},[s._v("#")]),s._v(" 1.问题描述")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("类Demo被AOP扫描到，其中有A和B两个方法，A方法中调用了B方法，执行A方法时，B方法的代理没有生效\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-问题剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-问题剖析"}},[s._v("#")]),s._v(" 2. 问题剖析")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("我们知道AOP底层使用JDK动态代理和cglib动态代理想结合，通过判断去创建对应的代理对象。\n而不管是那种方法，最终执行完代理后，都会执行目标方法：method.invoke(target,agrs)--\x3e传入目标对象\n所以执行A方法的代理后，执行A的目标方法，此时执行的对象是目标对象，所以目标对象执行A方法是A中隐藏的this\n指的就是目标对象，即执行B方法的不再是代理对象而是目标对象，故B方法不会被代理\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("blockquote",[a("p",[s._v("Spring 缓存注解是基于Spring AOP切面，必须走代理才能生效，同类调用或者子类调用父类带有缓存注解的方法时属于内部调用，没有走代理，所以注解不生效。")])]),s._v(" "),a("p",[s._v("如: @Cacheable注解")]),s._v(" "),a("p",[s._v("https://blog.csdn.net/xiaohai0504/article/details/6832990  cglib动态代理介绍(一)")])])}),[],!1,null,null,null);t.default=n.exports}}]);